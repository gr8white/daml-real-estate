module User where

import Property
import Payment

template User with
    userAdmin: Party
    user: Party
    accountNumber : Text
  where
    signatory user
    key user : Party
    maintainer key

    nonconsuming choice MintProperty: (ContractId Property, ContractId BankAccount)
      with
        address : Text
        initialPrice : Decimal
        royaltyRate : Decimal
      controller user
        do
          issued <- getTime

          (bankAccountCid, bankAccount) <- fetchByKey @BankAccount (user, accountNumber)

          let mintFee = 10000.0 * 1.04 : Decimal

          assertMsg "User can't afford to mint new property" (bankAccount.accountBalance >= mintFee)

          updatedAccount <- exercise bankAccountCid UpdateBalance
            with
              newFunds = -mintFee

          create Payable
            with
              from = user
              to = userAdmin
              amount = mintFee
              reference = "Mint Fee for `" <> address <> "`."
              ..

          newProperty <- create Property
            with 
              lastPrice = initialPrice
              issuer = user
              owner = user
              ..

          return (newProperty, updatedAccount)
